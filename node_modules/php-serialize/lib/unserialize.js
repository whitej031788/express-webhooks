'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _parser = require('./parser');

var _parser2 = _interopRequireDefault(_parser);

var _helpers = require('./helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getClassReference(className, scope, strict) {
  var container = void 0;
  var classReference = scope[className];
  (0, _assert2.default)(classReference || !strict, 'Class ' + className + ' not found in given scope');
  if (classReference) {
    container = new ((0, _helpers.getClass)(classReference.prototype))();
  } else {
    container = (0, _helpers.getIncompleteClass)(className);
  }
  return container;
}

function unserializePairs(parser, length, scope, options) {
  var pairs = [];
  for (var i = 0; i < length; i += 1) {
    var key = unserializeItem(parser, scope, options);
    parser.seekExpected(';');
    var value = unserializeItem(parser, scope, options);
    if (parser.peekAhead(1) === ';') {
      parser.advance(1);
    }
    pairs.push({ key: key, value: value });
  }
  return pairs;
}

function unserializeItem(parser, scope, options) {
  var type = parser.getType();
  if (type === 'null') {
    return null;
  }
  if (type === 'int' || type === 'float') {
    var value = parser.readUntil(';');
    return type === 'int' ? parseInt(value, 10) : parseFloat(value);
  }
  if (type === 'boolean') {
    var _value = parser.readAhead(1);
    return _value === '1';
  }
  if (type === 'string') {
    return parser.getByLength('"', '"', function (length) {
      return parser.readAhead(length);
    });
  }
  if (type === 'array-object') {
    var pairs = parser.getByLength('{', '}', function (length) {
      return unserializePairs(parser, length, scope, options);
    });

    var isArray = pairs.every(function (item) {
      return (0, _helpers.isInteger)(item.key);
    });
    var result = isArray ? [] : {};
    pairs.forEach(function (_ref) {
      var key = _ref.key,
          value = _ref.value;

      result[key] = value;
    });
    return result;
  }
  if (type === 'notserializable-class') {
    var name = parser.getByLength('"', '"', function (length) {
      return parser.readAhead(length);
    });
    parser.seekExpected(':');
    var _pairs = parser.getByLength('{', '}', function (length) {
      return unserializePairs(parser, length, scope, options);
    });
    var _result = getClassReference(name, scope, options.strict);
    _pairs.forEach(function (_ref2) {
      var key = _ref2.key,
          value = _ref2.value;

      _result[key] = value;
    });
    return _result;
  }
  if (type === 'serializable-class') {
    var _name = parser.getByLength('"', '"', function (length) {
      return parser.readAhead(length);
    });
    parser.seekExpected(':');
    var payload = parser.getByLength('{', '}', function (length) {
      return parser.readAhead(length);
    });
    var _result2 = getClassReference(_name, scope, options.strict);
    if (!(_result2 instanceof _helpers.__PHP_Incomplete_Class)) {
      (0, _assert2.default)(_result2.unserialize, 'unserialize not found on class when processing \'' + _name + '\'');
      _result2.unserialize(payload);
    }
    return _result2;
  }
  throw new Error('Invalid type \'' + type + '\' encounterd while unserializing');
}

function unserialize(item) {
  var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var givenOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  var options = Object.assign({}, givenOptions);
  if (typeof options.strict === 'undefined') {
    options.strict = true;
  }
  var parser = new _parser2.default(Buffer.from(item), 0);
  return unserializeItem(parser, scope, options);
}

exports.default = unserialize;