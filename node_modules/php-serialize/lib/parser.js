'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PARSER_TYPES = {
  N: 'null',
  i: 'int',
  d: 'float',
  b: 'boolean',
  s: 'string',
  a: 'array-object',
  C: 'serializable-class',
  O: 'notserializable-class'
};

var Parser = function () {
  function Parser(contents, index) {
    _classCallCheck(this, Parser);

    this.contents = contents;
    this.index = index;
  }

  _createClass(Parser, [{
    key: 'error',
    value: function error() {
      var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Syntax Error';

      return new Error(message + ' at index ' + this.index + ' while unserializing payload');
    }
  }, {
    key: 'advance',
    value: function advance(index) {
      this.index += index;
    }
  }, {
    key: 'readAhead',
    value: function readAhead(index) {
      var contents = this.peekAhead(index);
      this.index += index;
      return contents;
    }
  }, {
    key: 'readUntil',
    value: function readUntil(expected) {
      var index = this.contents.indexOf(expected, this.index);
      if (index === -1) {
        throw this.error('Expected \'' + expected + '\'');
      }
      return this.readAhead(index - this.index);
    }
  }, {
    key: 'peekAhead',
    value: function peekAhead(index) {
      return this.contents.toString('utf8', this.index, this.index + index);
    }
  }, {
    key: 'seekExpected',
    value: function seekExpected(contents) {
      var slice = this.readAhead(contents.length);
      if (slice !== contents) {
        this.index -= contents.length;
        throw this.error('Expected \'' + contents + '\'');
      }
    }
  }, {
    key: 'getType',
    value: function getType() {
      var _readAhead = this.readAhead(2),
          _readAhead2 = _slicedToArray(_readAhead, 2),
          type = _readAhead2[0],
          ps = _readAhead2[1];

      var parserType = PARSER_TYPES[type];

      if (!parserType) {
        throw this.error('Unknown type');
      }
      if (parserType === 'null' ? ps !== ';' : ps !== ':') {
        throw this.error();
      }
      return parserType;
    }
  }, {
    key: 'getLength',
    value: function getLength() {
      var length = parseInt(this.readUntil(':'), 10);
      if (Number.isNaN(length)) {
        throw this.error();
      }
      return length;
    }
  }, {
    key: 'getByLength',
    value: function getByLength(startSequence, endSequence, callback) {
      var length = this.getLength();
      this.seekExpected(':' + startSequence);
      var result = callback(length);
      this.seekExpected(endSequence);

      return result;
    }
  }]);

  return Parser;
}();

exports.default = Parser;