'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = serialize;

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _helpers = require('./helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getClassNamespace(item, scope) {
  return Object.keys(scope).find(function (key) {
    return item instanceof scope[key];
  }) || item.__PHP_Incomplete_Class_Name || item.constructor.name;
}
function serializeObject(item, scope) {
  var processed = Array.isArray(item) ? item.map(function (value, index) {
    return '' + serialize(index, scope) + serialize(value, scope);
  }) : Object.keys(item).map(function (key) {
    return '' + serialize(key, scope) + serialize(item[key], scope);
  });
  return processed.length + ':{' + processed.join('') + '}';
}

function serialize(item) {
  var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var type = typeof item === 'undefined' ? 'undefined' : _typeof(item);

  if (item === null) {
    return 'N;';
  }
  if (type === 'number') {
    if ((0, _helpers.isInteger)(item)) {
      return 'i:' + item + ';';
    }
    return 'd:' + item.toString().toUpperCase() + ';';
  }
  if (type === 'string') {
    return 's:' + (0, _helpers.getByteLength)(item) + ':"' + item + '";';
  }
  if (type === 'boolean') {
    return 'b:' + (item ? '1' : '0') + ';';
  }
  if (type !== 'object') {
    throw new TypeError('Unexpected type \'' + type + '\' encountered while attempting to serialize');
  }
  if (Array.isArray(item) || item.constructor.name === 'Object') {
    return 'a:' + serializeObject(item, scope);
  }

  var constructorName = getClassNamespace(item, scope);
  if (typeof item.serialize === 'function') {
    var serialized = item.serialize();
    (0, _assert2.default)(typeof serialized === 'string', item.constructor.name + '.serialize should return a string');
    return 'C:' + constructorName.length + ':"' + constructorName + '":' + (0, _helpers.getByteLength)(serialized) + ':{' + serialized + '}';
  }
  return 'O:' + constructorName.length + ':"' + constructorName + '":' + serializeObject(item, scope);
}